/*
Gatekeeper API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// VerifyApiService VerifyApi service
type VerifyApiService service

type ApiVerifyDocumentPostRequest struct {
	ctx _context.Context
	ApiService *VerifyApiService
	nameFirst *string
	nameLast *string
	documentType *string
	documentValue *string
	birthday *string
	addressStreet1 *string
	addressCity *string
	addressSubdivision *string
	addressPostalCode *string
	addressCountryCode *string
	id *string
	nameMiddle *string
	addressStreet2 *string
	phoneNumber *string
	ipAddress *string
	note *string
}

func (r ApiVerifyDocumentPostRequest) NameFirst(nameFirst string) ApiVerifyDocumentPostRequest {
	r.nameFirst = &nameFirst
	return r
}
func (r ApiVerifyDocumentPostRequest) NameLast(nameLast string) ApiVerifyDocumentPostRequest {
	r.nameLast = &nameLast
	return r
}
// Must be either SSN or Drivers License
func (r ApiVerifyDocumentPostRequest) DocumentType(documentType string) ApiVerifyDocumentPostRequest {
	r.documentType = &documentType
	return r
}
func (r ApiVerifyDocumentPostRequest) DocumentValue(documentValue string) ApiVerifyDocumentPostRequest {
	r.documentValue = &documentValue
	return r
}
// MM/DD/YYYY
func (r ApiVerifyDocumentPostRequest) Birthday(birthday string) ApiVerifyDocumentPostRequest {
	r.birthday = &birthday
	return r
}
func (r ApiVerifyDocumentPostRequest) AddressStreet1(addressStreet1 string) ApiVerifyDocumentPostRequest {
	r.addressStreet1 = &addressStreet1
	return r
}
func (r ApiVerifyDocumentPostRequest) AddressCity(addressCity string) ApiVerifyDocumentPostRequest {
	r.addressCity = &addressCity
	return r
}
func (r ApiVerifyDocumentPostRequest) AddressSubdivision(addressSubdivision string) ApiVerifyDocumentPostRequest {
	r.addressSubdivision = &addressSubdivision
	return r
}
func (r ApiVerifyDocumentPostRequest) AddressPostalCode(addressPostalCode string) ApiVerifyDocumentPostRequest {
	r.addressPostalCode = &addressPostalCode
	return r
}
func (r ApiVerifyDocumentPostRequest) AddressCountryCode(addressCountryCode string) ApiVerifyDocumentPostRequest {
	r.addressCountryCode = &addressCountryCode
	return r
}
func (r ApiVerifyDocumentPostRequest) Id(id string) ApiVerifyDocumentPostRequest {
	r.id = &id
	return r
}
func (r ApiVerifyDocumentPostRequest) NameMiddle(nameMiddle string) ApiVerifyDocumentPostRequest {
	r.nameMiddle = &nameMiddle
	return r
}
func (r ApiVerifyDocumentPostRequest) AddressStreet2(addressStreet2 string) ApiVerifyDocumentPostRequest {
	r.addressStreet2 = &addressStreet2
	return r
}
func (r ApiVerifyDocumentPostRequest) PhoneNumber(phoneNumber string) ApiVerifyDocumentPostRequest {
	r.phoneNumber = &phoneNumber
	return r
}
func (r ApiVerifyDocumentPostRequest) IpAddress(ipAddress string) ApiVerifyDocumentPostRequest {
	r.ipAddress = &ipAddress
	return r
}
func (r ApiVerifyDocumentPostRequest) Note(note string) ApiVerifyDocumentPostRequest {
	r.note = &note
	return r
}

func (r ApiVerifyDocumentPostRequest) Execute() (VerifyUserResponse, *_nethttp.Response, error) {
	return r.ApiService.VerifyDocumentPostExecute(r)
}

/*
VerifyDocumentPost Verify user identity with blockscore. Blockscore already checks OFAC and PEP so we might as well return those results every call to get our money's worth 

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVerifyDocumentPostRequest
*/
func (a *VerifyApiService) VerifyDocumentPost(ctx _context.Context) ApiVerifyDocumentPostRequest {
	return ApiVerifyDocumentPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VerifyUserResponse
func (a *VerifyApiService) VerifyDocumentPostExecute(r ApiVerifyDocumentPostRequest) (VerifyUserResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  VerifyUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VerifyApiService.VerifyDocumentPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/verify/document"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.nameFirst == nil {
		return localVarReturnValue, nil, reportError("nameFirst is required and must be specified")
	}
	if r.nameLast == nil {
		return localVarReturnValue, nil, reportError("nameLast is required and must be specified")
	}
	if r.documentType == nil {
		return localVarReturnValue, nil, reportError("documentType is required and must be specified")
	}
	if r.documentValue == nil {
		return localVarReturnValue, nil, reportError("documentValue is required and must be specified")
	}
	if r.birthday == nil {
		return localVarReturnValue, nil, reportError("birthday is required and must be specified")
	}
	if r.addressStreet1 == nil {
		return localVarReturnValue, nil, reportError("addressStreet1 is required and must be specified")
	}
	if r.addressCity == nil {
		return localVarReturnValue, nil, reportError("addressCity is required and must be specified")
	}
	if r.addressSubdivision == nil {
		return localVarReturnValue, nil, reportError("addressSubdivision is required and must be specified")
	}
	if r.addressPostalCode == nil {
		return localVarReturnValue, nil, reportError("addressPostalCode is required and must be specified")
	}
	if r.addressCountryCode == nil {
		return localVarReturnValue, nil, reportError("addressCountryCode is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.id != nil {
		localVarFormParams.Add("id", parameterToString(*r.id, ""))
	}
	localVarFormParams.Add("name_first", parameterToString(*r.nameFirst, ""))
	if r.nameMiddle != nil {
		localVarFormParams.Add("name_middle", parameterToString(*r.nameMiddle, ""))
	}
	localVarFormParams.Add("name_last", parameterToString(*r.nameLast, ""))
	localVarFormParams.Add("document_type", parameterToString(*r.documentType, ""))
	localVarFormParams.Add("document_value", parameterToString(*r.documentValue, ""))
	localVarFormParams.Add("birthday", parameterToString(*r.birthday, ""))
	localVarFormParams.Add("address_street1", parameterToString(*r.addressStreet1, ""))
	if r.addressStreet2 != nil {
		localVarFormParams.Add("address_street2", parameterToString(*r.addressStreet2, ""))
	}
	localVarFormParams.Add("address_city", parameterToString(*r.addressCity, ""))
	localVarFormParams.Add("address_subdivision", parameterToString(*r.addressSubdivision, ""))
	localVarFormParams.Add("address_postal_code", parameterToString(*r.addressPostalCode, ""))
	localVarFormParams.Add("address_country_code", parameterToString(*r.addressCountryCode, ""))
	if r.phoneNumber != nil {
		localVarFormParams.Add("phone_number", parameterToString(*r.phoneNumber, ""))
	}
	if r.ipAddress != nil {
		localVarFormParams.Add("ip_address", parameterToString(*r.ipAddress, ""))
	}
	if r.note != nil {
		localVarFormParams.Add("note", parameterToString(*r.note, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
