/*
Gatekeeper API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// CheckApiService CheckApi service
type CheckApiService service

type ApiCheckDigitalCurrencyAddressGetRequest struct {
	ctx _context.Context
	ApiService *CheckApiService
	doa *bool
}

// Digital currency address
func (r ApiCheckDigitalCurrencyAddressGetRequest) Doa(doa bool) ApiCheckDigitalCurrencyAddressGetRequest {
	r.doa = &doa
	return r
}

func (r ApiCheckDigitalCurrencyAddressGetRequest) Execute() (CheckDigitalCurrencyAddressResponse, *_nethttp.Response, error) {
	return r.ApiService.CheckDigitalCurrencyAddressGetExecute(r)
}

/*
CheckDigitalCurrencyAddressGet Check if digital currency address is in CSL

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCheckDigitalCurrencyAddressGetRequest
*/
func (a *CheckApiService) CheckDigitalCurrencyAddressGet(ctx _context.Context) ApiCheckDigitalCurrencyAddressGetRequest {
	return ApiCheckDigitalCurrencyAddressGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CheckDigitalCurrencyAddressResponse
func (a *CheckApiService) CheckDigitalCurrencyAddressGetExecute(r ApiCheckDigitalCurrencyAddressGetRequest) (CheckDigitalCurrencyAddressResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CheckDigitalCurrencyAddressResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckApiService.CheckDigitalCurrencyAddressGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/check/digital-currency-address"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.doa == nil {
		return localVarReturnValue, nil, reportError("doa is required and must be specified")
	}

	localVarQueryParams.Add("doa", parameterToString(*r.doa, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCheckNameGetRequest struct {
	ctx _context.Context
	ApiService *CheckApiService
	minscore *int32
	firstName *string
	lastName *string
	getcoinsID *string
	middleName *string
	address *string
	country *string
	cached *bool
}

// Sets minimum score to define a match
func (r ApiCheckNameGetRequest) Minscore(minscore int32) ApiCheckNameGetRequest {
	r.minscore = &minscore
	return r
}
// Name to search CSL list for match. First and last name are required.
func (r ApiCheckNameGetRequest) FirstName(firstName string) ApiCheckNameGetRequest {
	r.firstName = &firstName
	return r
}
// Name to search CSL list for match.
func (r ApiCheckNameGetRequest) LastName(lastName string) ApiCheckNameGetRequest {
	r.lastName = &lastName
	return r
}
// Getcoins user id to relate to blockscore person id. This way, we don&#39;t need to ask blockscore for the ID and we can minimize calls to the service
func (r ApiCheckNameGetRequest) GetcoinsID(getcoinsID string) ApiCheckNameGetRequest {
	r.getcoinsID = &getcoinsID
	return r
}
// Not required but will help return more accurate results.
func (r ApiCheckNameGetRequest) MiddleName(middleName string) ApiCheckNameGetRequest {
	r.middleName = &middleName
	return r
}
// Street address of person being searched
func (r ApiCheckNameGetRequest) Address(address string) ApiCheckNameGetRequest {
	r.address = &address
	return r
}
// Two letter country code to make search more specific
func (r ApiCheckNameGetRequest) Country(country string) ApiCheckNameGetRequest {
	r.country = &country
	return r
}
// Boolean to denote whether to bypass cache or not. May be omitted if unsure.
func (r ApiCheckNameGetRequest) Cached(cached bool) ApiCheckNameGetRequest {
	r.cached = &cached
	return r
}

func (r ApiCheckNameGetRequest) Execute() (CheckNameResponse, *_nethttp.Response, error) {
	return r.ApiService.CheckNameGetExecute(r)
}

/*
CheckNameGet Check if user has watchlist hits.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCheckNameGetRequest
*/
func (a *CheckApiService) CheckNameGet(ctx _context.Context) ApiCheckNameGetRequest {
	return ApiCheckNameGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CheckNameResponse
func (a *CheckApiService) CheckNameGetExecute(r ApiCheckNameGetRequest) (CheckNameResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CheckNameResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CheckApiService.CheckNameGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/check/name"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.minscore == nil {
		return localVarReturnValue, nil, reportError("minscore is required and must be specified")
	}
	if r.firstName == nil {
		return localVarReturnValue, nil, reportError("firstName is required and must be specified")
	}
	if r.lastName == nil {
		return localVarReturnValue, nil, reportError("lastName is required and must be specified")
	}
	if r.getcoinsID == nil {
		return localVarReturnValue, nil, reportError("getcoinsID is required and must be specified")
	}

	localVarQueryParams.Add("minscore", parameterToString(*r.minscore, ""))
	localVarQueryParams.Add("first_name", parameterToString(*r.firstName, ""))
	if r.middleName != nil {
		localVarQueryParams.Add("middle_name", parameterToString(*r.middleName, ""))
	}
	localVarQueryParams.Add("last_name", parameterToString(*r.lastName, ""))
	if r.address != nil {
		localVarQueryParams.Add("address", parameterToString(*r.address, ""))
	}
	if r.country != nil {
		localVarQueryParams.Add("country", parameterToString(*r.country, ""))
	}
	if r.cached != nil {
		localVarQueryParams.Add("cached", parameterToString(*r.cached, ""))
	}
	localVarQueryParams.Add("getcoinsID", parameterToString(*r.getcoinsID, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorMessage
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
